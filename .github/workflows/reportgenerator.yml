name: Generate Coverage Report

on:

  workflow_call:

  schedule:
    - cron: '0 0 * * *'  # Runs at 00:00 UTC every day
  workflow_call:  # Keep this to allow other workflows to call it
  pull_request:  # Added to support PR comments

env:
  REPORT_RETENTION_DAYS: 30  # Keep reports for 30 days
  HISTORY_RETENTION_DAYS: 90  # Keep history for 90 days
  COVERAGE_DATA_PATH: reports/coverage_data  # Path for structured coverage data


jobs:
  generate-report:
    runs-on: ubuntu-latest

    steps:

    permissions:
      contents: write  # Needed for pushing to the repository
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main  # Explicitly checkout main branch

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          pip install -r requirements.txt
          
      - name: Run tests with coverage
        run: pytest --cov=. --cov-report=cobertura
      
      - name: Download coverage history
        uses: actions/cache@v4
        with:
          path: .history/coverage
          key: ${{ runner.os }}-coverage-history-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-coverage-history-
      
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.x
          dotnet-quality: 'ga'

      - name: ReportGenerator
        uses: danielpalme/ReportGenerator-GitHub-Action@5.4.4
        with:
          reports: 'cobertura.xml'
          targetdir: 'coveragereport'
          reporttypes: 'HtmlInline;Cobertura;MarkdownSummaryGithub;TextSummary;JsonSummary'  # Added JsonSummary for data tracking
          verbosity: 'Info'
          title: 'NLP Project Coverage Report'
          tag: '${{ github.run_number }}_${{ github.run_id }}'
          historydir: '.history/coverage'  # Store coverage history
          filefilters: '+*'  # Include all files

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
      - name: Install jq
        run: sudo apt-get install -y jq
          
      - name: Update coverage reports
        run: |
          # Pull latest changes first to avoid conflicts
          git pull origin main
          
          # Create necessary directories
          mkdir -p reports
          mkdir -p ${{ env.COVERAGE_DATA_PATH }}
          
          # Get current date in UTC
          current_date=$(date -u +%Y-%m-%d)
          report_dir="reports/${current_date}"
          
          # Remove old report if it exists and copy new one
          rm -rf "${report_dir}"
          cp -r coveragereport "${report_dir}"
          
          # Store coverage data in structured format
          if [ -f "coveragereport/Summary.json" ]; then
            cp coveragereport/Summary.json "${{ env.COVERAGE_DATA_PATH }}/${current_date}.json"
          fi
          
          # Create or update coverage trend data
          if [ ! -f "${{ env.COVERAGE_DATA_PATH }}/README.md" ]; then
            echo "# Coverage History" > ${{ env.COVERAGE_DATA_PATH }}/README.md
            echo "|------|---------------|-----------------|" >> ${{ env.COVERAGE_DATA_PATH }}/README.md
          fi
          
          # Get coverage data
          if [ -f "${{ env.COVERAGE_DATA_PATH }}/${current_date}.json" ]; then
            line_coverage=$(jq -r '.summary.linecoverage // "N/A"' "${{ env.COVERAGE_DATA_PATH }}/${current_date}.json")
            branch_coverage=$(jq -r '.summary.branchcoverage // "N/A"' "${{ env.COVERAGE_DATA_PATH }}/${current_date}.json")
            
            # Insert new data at the top of the table
            sed -i "3i| ${current_date} | ${line_coverage}% | ${branch_coverage}% |" ${{ env.COVERAGE_DATA_PATH }}/README.md
            
            # Update last updated timestamp
            sed -i "1a\Last updated: ${current_date} UTC" ${{ env.COVERAGE_DATA_PATH }}/README.md
            sed -i '3d' ${{ env.COVERAGE_DATA_PATH }}/README.md  # Remove old timestamp
          fi
          
          # Cleanup old reports (keep last 30 days)
          find reports/* -type d -mtime +${{ env.REPORT_RETENTION_DAYS }} -exec rm -rf {} +
          find ${{ env.COVERAGE_DATA_PATH }}/* -name "*.json" -type f -mtime +${{ env.REPORT_RETENTION_DAYS }} -delete
          
          # Stage changes
          git add reports/
          git add ${{ env.COVERAGE_DATA_PATH }}/
          
          # Commit and push if there are changes
          if git status --porcelain | grep .; then
            git commit -m "Update coverage report and data for ${current_date}"
            git push origin main
          fi

      - name: Add coverage comment to PR
        if: github.event_name == 'pull_request'
        run: |
          current_date=$(date -u +%Y-%m-%d)
          {
            echo "ðŸ“Š Coverage report has been generated and pushed to [reports/coverage_data](../../tree/main/${{ env.COVERAGE_DATA_PATH }}/README.md)"
            echo ""
            echo "View the [latest report](../../tree/main/reports/${current_date})"
          } >> coveragereport/SummaryGithub.md
          gh pr comment $PR_NUMBER --body-file coveragereport/SummaryGithub.md
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.number }}
          
      - name: Publish coverage in build summary
        run: cat coveragereport/SummaryGithub.md >> $GITHUB_STEP_SUMMARY
        shell: bash

